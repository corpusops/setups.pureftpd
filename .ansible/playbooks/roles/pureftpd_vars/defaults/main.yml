---
corpusops_core_projects_path: /srv/projects
# users than have full right to edit file in the container
# When this is enabled, the project user/group is also granted full perms
# (attention, uids!)
cops_pureftpd__supereditors_paths:
  - "{project_root}"
  - "{data_root}"
# space separated string of uids to allow to write inside
# projetct directories (used in development through posix ACLS setter)
cops_pureftpd__supereditors: >-
  {{ ansible_env.get(
      'SUPEREDITORS', cops_supereditors|default('')
     ) | copsf_splitstrip | to_json }}
cops_pureftpd_supereditors_paths: "{_supereditors_paths}"
cops_pureftpd_supereditors: "{_supereditors}"
# cops_pureftpd_deb_packages is initialised on behalf of cops_registry voodoo
# and let users override the list easily
# cops_pureftpd_packages: "{{vars['cops_pureftpd_deb_packages___default']+['vim']}}"
cops_pureftpd_deb_runtime_packages: []
cops_pureftpd_deb_packages___default: "{{
  (cops_pureftpd_deb_runtime_packages)
  | to_json
  }}"
# either null string or "3"
cops_pureftpd_rh_packages: []
# cops_pureftpd_packages: "{{cops_pureftpd_deb_packages___default+['vim']}}"
cops_pureftpd_deb_build_packages___default: []
cops_pureftpd_rh_build_packages: []
cops_pureftpd_sysctls: []
cops_pureftpd_domain: "{{ansible_fqdn}}"
# for internal monitoring
# for internal service access
cops_pureftpd_restart_check_retries: 60
cops_pureftpd_internal_host: "127.0.0.1"
cops_pureftpd_internal_port: "21"
cops_pureftpd_name: 'pureftpd'
cops_pureftpd_user: "{name}-user"
cops_pureftpd_group: "{name}-group"
cops_pureftpd_projects_dir: '{{corpusops_vars.projects_path}}'
cops_pureftpd_project_dir: '{projects_dir}/{name}'
cops_pureftpd_project_root: "{project_dir}/project"
cops_pureftpd_data_root: "{project_dir}/data"
cops_pureftpd_fixperms: "{project_dir}/fixperms.sh"
cops_pureftpd_fixperms_cron: "/etc/cron.d/{name}-fixperms"
cops_pureftpd_fixperms_cron_periodicity: "0 */2 * * *"
cops_pureftpd_secret_variables:
  - admin_password
cops_pureftpd_cops_format_resolve_topdb: false
cops_pureftpd_cops_do_format_resolve: true
cops_pureftpd_cops_sub_namespaces:
  s: {}
  lifecycle: {}
  ftp_conf: {}
cops_pureftpd_use_etc_hosts: false
cops_pureftpd_pureftpd_uri: "http://{domain}"
cops_pureftpd_env_overrides: {}
cops_pureftpd_env: {}
cops_pureftpd_pureftpd_bind_host: '127.0.0.1'
# templates
## entry point
cops_pureftpd_provision_dir: /provision_dir
cops_pureftpd_ep_ansible_args: >-
 -e "cops_cwd={provision_dir}"
 -e "cops_playbooks=${COPS_ROOT}/playbooks/corpusops"
 -e "cops_path=${COPS_ROOT}"
cops_pureftpd_ep_vaults:
  - "{provision_dir}/.ansible/vaults/default.yml"
  - "{provision_dir}/.ansible/vaults/app.yml"
  - "{provision_dir}/.ansible/vaults/docker.yml"
  - /setup/reconfigure.yml
cops_pureftpd_ep_template: "../templates/app_entry_point"
# Docker entrypoint settings, tags for cli and vars for playbook reuse via
# conditionals
cops_pureftpd_ep_folder: ".ansible/playbooks"
cops_pureftpd_ep_playbook: "app.yml"
cops_pureftpd_ep_skip_tags: "{{(
  'cops_pureftpd_lifecycle_app_push_code,'
  'cops_pureftpd_s_users,'
  'cops_pureftpd_s_first_fixperms,'
  'cops_pureftpd_s_prerequisites,'
  'cops_pureftpd_s_setup_venv,'
  'cops_pureftpd_s_setup_front,'
  'cops_pureftpd_s_workers,'
  'cops_pureftpd_s_entry_point,'
  'cops_pureftpd_s_manage_content,'
  'cops_pureftpd_s_end_fixperms,'
  )}}"
cops_pureftpd_ep_post_start_skip_tags: "{{(
  'cops_pureftpd_s_users,'
  'cops_pureftpd_s_layout,'
  'cops_pureftpd_s_first_fixperms,'
  'cops_pureftpd_s_prerequisites,'
  'cops_pureftpd_s_setup,'
  'cops_pureftpd_s_reverse_proxy,'
  'cops_pureftpd_s_workers,'
  'cops_pureftpd_s_entry_point,'
  )}}"
# global orchestration steps (db, code sync, web & workers prereqs, pureftpd config)
cops_pureftpd_become: true
#  - "add --force file:{project_root}/develop/plone.restapi-angular"
cops_pureftpd_ep_main_ep: "/entry_point"
# service
cops_pureftpd_service: "pure-ftpd"
cops_pureftpd_services: ["{service}"]
cops_pureftpd_services_nginx_reload_state: "reloaded"
# cops_pureftpd_rhandlers: [reload_cops_pureftpd]
cops_pureftpd_rhandlers: [restart_cops_pureftpd_systemd, reload_cops_pureftpd]
# Reconfigure upon image reboots
cops_pureftpd_reconfigure_services: |-
  {% set ret = [] %}
  {% if ansible_virtualization_type in ['docker'] %}
  {% set _ = ret.append("post-start-{service}") %}
  {% endif %}
  {{ ret | to_json }}
cops_pureftpd_activated: true
# Layout, files & configs
cops_pureftpd_stickymode: "2"
cops_pureftpd_files___default:
  - {path: "{projects_dir}",
     owner: root, group: root, state: directory}
  - {path: "{project_dir}",
     owner: root, group: root, state: directory}
  - {path: "{project_root}",
     owner: "{user}", group: "{group}",
     state: directory, mode: "{stickymode}750"}
  - {path: "{data_root}",
     owner: "{user}", group: "{group}",
     state: directory, mode: "{stickymode}751"}
cops_pureftpd_files: "{{vars['cops_pureftpd_files___default']}}"
# Config files
cops_pureftpd_configs___default: []
cops_pureftpd_configs: "{{vars['cops_pureftpd_configs___default']}}"
cops_pureftpd_fixperms_configs___default:
  - {src: "../templates/fixperms.sh",
     dest: "{fixperms}", mode: "0755",
     owner: root, group: root}
cops_pureftpd_fixperms_configs: "{{vars['cops_pureftpd_fixperms_configs___default']}}"
cops_pureftpd_ep_configs___default:
  # script to reconfigure image before and after systemd is launched
  - {src: "../templates/reconfigure.sh",
     dest: "{reconfigure}",
     mode: "0755",
     owner: "root",
     group: "root"}
  - {src: "../templates/post-start-reconfigure.service",
     dest: "/etc/systemd/system/post-start-{service}.service",
     mode: "0644",
     owner: "root",
     group: "root"}
  - {src: "{ep_template}",
     dest: "/app_entry_point", mode: "0755",
     owner: root, group: root}
cops_pureftpd_ep_configs: "{{vars['cops_pureftpd_ep_configs___default']}}"
# SystemD based reconfigure unit settings
cops_pureftpd_reconfigure_service_stderr: ""
cops_pureftpd_reconfigure_service_stdout: ""
cops_pureftpd_reconfigure_unit_after: "network.target {service}.service"
cops_pureftpd_reconfigure_install_wantedby: "multi-user.target"
cops_pureftpd_reconfigure: "{project_dir}/reconfigure.sh"
cops_pureftpd_reconfigure_passenv: "ANSIBLE_PLAY ANSIBLE_FOLDER COPS_ROOT"
cops_pureftpd_reconfigure_verbosity: "-v"
# Code synchronnisation settings (FORCE_COPS_PROVISION_PUSH_CODE to force)
cops_pureftpd_push_codes_cwd: "{cops_cwd}"
cops_pureftpd_push_codes_sync_mode: "{{ (
  cops_installer_mode in ['vagrant'] or
  ansible_virtualization_type in ['docker']
  ) and 'rsync' or 'git' }}"
cops_pureftpd_push_codes_file_tests:
  git: []
  rsync: [".git"]
cops_pureftpd_push_codes_rsync_opts:
  git:   ["-azv",                           "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
  rsync: ["-azv", "--include", ".git/**/*", "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
cops_pureftpd_push_codes_rsync_submodule_opts:
  git:   ["-azv", "--exclude", "*.retry"]
  rsync: ["-azv", "--exclude", "*.retry"]
cops_pureftpd_push_codes:
- path: "{project_root}"
  origin_path: "{push_codes_cwd}"
  sync_mode: "{{cops_pureftpd_push_codes_sync_mode}}"
  rsync_opts: "{{cops_pureftpd_push_codes_rsync_opts[cops_pureftpd_push_codes_sync_mode]}}"
  file_tests: "{{cops_pureftpd_push_codes_file_tests[cops_pureftpd_push_codes_sync_mode]}}"
  owner: "{user}"
  group: "{group}"
  sub_paths: []
# SSH deploy settings -> env vault
cops_deploy_ssh_key_paths:
  deploy:
    path: "{{'local/.ssh/deploy_key'|copsf_abspath}}"
    pub: "{{cops_deploy_ssh_pub_key|default('')}}"
    #  ssh-rsa xxx x@y
    # should be in encypted vault
    private: "{{cops_deploy_ssh_key|default('')}}"
    # -----BEGIN RSA PRIVATE KEY-----
    # -----END RSA PRIVATE KEY-----
cops_pureftpd_environment___default:
  FOO: bar
cops_pureftpd_environment: "{{vars['cops_pureftpd_environment___default']}}"
cops_pureftpd_ftp_root: "{data_root}/ftp"
cops_pureftpd_conf_Passsive: "{data_root}/ftp"
corpusops_services_ftp_pureftpd_conf_ForcePassiveIP: null
corpusops_services_ftp_pureftpd_conf_PassivePortRange: null
#corpusops_services_ftp_pureftpd_conf_ForcePassiveIP: "x.x.x.x"
#corpusops_services_ftp_pureftpd_conf_PassivePortRange: "22300 22400"
cops_pureftpd_ftp_additional_users:
- user: "{user}-ro"
  group: "{group}-ro"
cops_pureftpd_ftp_root: /srv/ftp
cops_pureftpd_ftp_users:
- admin:
    password: "{{vars['cops_pureftpd_ftp_admin_password']}}"
    home: "{ftp_root}"
    # sys user under the hood (must exist before)
    user: "{user}"
    group: "{group}"
    mode: "2771"
    # delete: false
    # readonly: false
    # will apply a setfacl $user:perm $group:perm
    # operms: rwx (default) owner perms
    # perms: rwx (default)  effective user perms
#- readonlyuser::
#    password: "{{vars['cops_pureftpd_ftp_admin_password']}}"
#    home: "{ftp_root}"
#    # sys user under the hood (must exist before)
#    user: "{user}-ro"
#    group: "{group}-ro"
#    owner: "{user}"
#    owner_group: "{group}"
#    mode: "2771"
#		 perms: r--
#    # delete: false
#    # readonly: false
#    # will apply a setfacl $user:perm $group:perm
#    # operms: rwx (default) owner perms
#    # perms: rwx (default)  effective user perms


# vim:set ft=sls:
